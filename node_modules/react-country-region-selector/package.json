{
  "_from": "react-country-region-selector@^1.4.3",
  "_id": "react-country-region-selector@1.4.3",
  "_inBundle": false,
  "_integrity": "sha512-pWNWkPa6vnX4f8tWkaUQLh60JQKtP/TEkMIK4ZsXQYhvlmM6VNQe9qEbSLE80puakZ42KHhxoONjqg1LwEKW2A==",
  "_location": "/react-country-region-selector",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-country-region-selector",
    "fetchSpec": "^1.4.3",
    "name": "react-country-region-selector",
    "raw": "react-country-region-selector@^1.4.3",
    "rawSpec": "^1.4.3",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-country-region-selector/-/react-country-region-selector-1.4.3.tgz",
  "_shasum": "fda4a50a1a632078c06b9f99c7a4a81ff2f0b40e",
  "_shrinkwrap": null,
  "_spec": "react-country-region-selector@^1.4.3",
  "_where": "/Users/lauirvin/Desktop/yummy",
  "author": {
    "name": "country-regions"
  },
  "bugs": {
    "url": "https://github.com/country-regions/react-country-region-selector/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "CountryDropdown and RegionDropdown React components for your forms.",
  "devDependencies": {
    "babel-core": "^6.26.3",
    "babel-eslint": "^8.2.5",
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-preset-env": "^1.7.0",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-0": "^6.24.1",
    "country-region-data": "1.4.5",
    "cross-env": "^5.1.4",
    "enzyme": "^3.6.0",
    "enzyme-adapter-react-16": "^1.5.0",
    "eslint": "^5.0.1",
    "eslint-config-standard": "^11.0.0",
    "eslint-config-standard-react": "^6.0.0",
    "eslint-plugin-import": "^2.13.0",
    "eslint-plugin-node": "^7.0.1",
    "eslint-plugin-promise": "^4.0.0",
    "eslint-plugin-react": "^7.10.0",
    "eslint-plugin-standard": "^3.1.0",
    "gh-pages": "^1.2.0",
    "minimalist": "^1.0.0",
    "react": "^16.4.1",
    "react-dom": "^16.4.1",
    "react-scripts": "^1.1.4",
    "rollup": "^0.64.1",
    "rollup-plugin-babel": "^3.0.7",
    "rollup-plugin-commonjs": "^9.1.3",
    "rollup-plugin-json": "^3.0.0",
    "rollup-plugin-node-resolve": "^3.3.0",
    "rollup-plugin-peer-deps-external": "^2.2.0",
    "rollup-plugin-postcss": "^1.6.2",
    "rollup-plugin-url": "^1.4.0"
  },
  "engines": {
    "node": ">=8",
    "npm": ">=5"
  },
  "files": [
    "dist"
  ],
  "homepage": "https://github.com/country-regions/react-country-region-selector#readme",
  "jsnext:main": "dist/rcrs.es.js",
  "license": "MIT",
  "main": "dist/rcrs.js",
  "module": "dist/rcrs.es.js",
  "name": "react-country-region-selector",
  "optionalDependencies": {},
  "peerDependencies": {
    "prop-types": "^15.5.4",
    "react": "^15.0.0 || ^16.0.0",
    "react-dom": "^15.0.0 || ^16.0.0"
  },
  "readme": "# react-country-region-selector\n\n[![Build Status](https://travis-ci.com/country-regions/react-country-region-selector.svg?branch=master)](https://travis-ci.com/country-regions/react-country-region-selector)\n\n- [About](#about)  \n    - [Features](#features)\n    - [Gotchas](#gotchas)\n- [Demo](#demo)  \n- [Installation](#installation)\n- [Usage](#usage)\n- [List of component options](#options)\n- [Command-line](#command-line)\n- [Changelog](#changelog)\n- [Tests](#tests)\n- [Thanks!](#thanks)\n- [License](#license) (spoiler: MIT!)\n\n------------------\n\n<a name=\"about\"></a>\n### About\n\nThis library provides a pair of React components to display _connected_ country and region dropdowns (pick a country, it shows the relevant regions). If you're not using React, check out the [plain vanilla JS version](https://github.com/country-regions/country-region-selector) instead. The list of countries and regions is maintained separately and found in the [country-region-data](https://github.com/country-regions/country-region-data) repo.\n\n\n<a name=\"features\"></a>\n#### Features\n\nIt's pretty versatile.\n\n- There are two separate components (`<CountryDropdown />`, `<RegionDropdown>`) that you can embed in your \nDOM wherever you need. That sounded like a vulgar euphemism, but it wasn't, honest.\n- The source data used by the library is also exposed, should you need it.\n- It let's you customize the list of countries that appears via a whitelist, blacklist.\n- [A lot of options](#options) are provided, for things like styling, event callbacks and so on.\n- To keep file sizes down you have the option of creating a custom build of the library containing only a list of \nthose countries you want to show up. See [command line options](#command-line) for more info.\n\n\n<a name=\"gotchas\"></a>\n#### Gotchas\n\n- *Page charset*: some country names contain UTF-8 chars, so your page will need an appropriate charset to handle them. \nIf you see some invalid characters appearing in the dropdown, make sure you have UTF-8 specified in your page \n<code>&lt;head&gt;</code>, like so: ```<meta charset=\"UTF-8\">```\n- *Return values*: on an onChange event `event.target.value` is returned as the first value and the full `event` as the second.\n\n\n<a name=\"demo\"></a>\n### Demo\n\nCheck out the [github pages](http://country-regions.github.io/react-country-region-selector/) section for some examples + example\nJSX code.\n\n\n<a name=\"installation\"></a>\n### Installation\n\nUsing npm or yarn:\n\n```javascript\nnpm i react-country-region-selector\nyarn add react-country-region-selector\n```\n\n<a name=\"features\"></a>\n### Usage\n\nIt's very easy to use, but note that you will need to track the country and region value somewhere - either in your\ncomponent state or in a store somewhere. Here's a simple example that uses state:\n\n```javascript\nimport React, { Component } from 'react';\n\n// note that you can also export the source data via CountryRegionData. It's in a deliberately concise format to \n// keep file size down\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n\nclass Example extends Component {\n  constructor (props) {\n    super(props);\n    this.state = { country: '', region: '' };\n  }\n\n  selectCountry (val) {\n    this.setState({ country: val });\n  }\n\n  selectRegion (val) {\n    this.setState({ region: val });\n  }\n\n  render () {\n    const { country, region } = this.state;\n    return (\n      <div>\n        <CountryDropdown\n          value={country}\n          onChange={(val) => this.selectCountry(val)} />\n        <RegionDropdown\n          country={country}\n          value={region}\n          onChange={(val) => this.selectRegion(val)} />\n      </div>\n    );\n  }\n}\n```\n\nGenerally you don't need `CountryRegionData`, but should you need it, the raw data is accessible like in the above example.\n\n\n<a name=\"options\"></a>\n### Options\n\nThese are the attributes that can be passed to the two components. _Note: any other attributes that aren't\nspecified here will be added directly to the `<select>` DOM element._\n\n\n```<CountryDropdown />```\n\n| Parameter | Required? | Default | Type | Description |\n|:---|:---:|:---|:---|:---|\n| value | Yes | `\"\"` | `string` | The currently selected country. This should either be the shortcode, or the full country name depending on what you're using for your value attribute (see the `valueType` option). By default it's the full country name. |\n| onChange | Yes | `-` | `function` | Callback that gets called when the user selects a country. Use this to store the value in whatever store you're using (or just the parent component state). |\n| onBlur | No | `-` | `function` | Callback that gets called when the user blurs off the country field. |\n| name | No | `\"rcrs-country\"` | `string` | The name attribute of the generated select box. |\n| id | No | `\"\"` | `string` | The ID of the generated select box. Not added by default. |\n| classes | No | `\"\"` | `string` | Any additional space-separated classes you want to add. |\n| showDefaultOption | No | `true` | `boolean` | Whether you want to show a default option. |\n| priorityOptions | No | `array` | `[]` | Lets you target countries that should appear at the top of the dropdown. Should also be an array of country shortcodes. | \n| defaultOptionLabel | No | `\"Select Country\"` | `string` | The default option label. |\n| labelType | No | `\"full\"` | `string` | Either `\"full\"` or `\"short\"`. This governs whether you see country names or country short codes in the dropdown. |\n| valueType | No | `\"full\"` | `string` | Either `\"full\"` or `\"short\"`. This controls the actual `value` attribute of  each `<option>` in the dropdown. Please note, if you set this to `\"short\"` you will need to let the corresponding `<RegionDropdown />` component know as well, by passing a `countryValueType=\"short\"` attribute. |\n| whitelist | No | `[]` | `array` | This setting lets you target specific countries to appear in the dropdown. Only those specified here will appear. This should be an array of country shortcodes. See the [country-region-data](https://github.com/country-regions/country-region-data) repo for the data and the shortcodes. |\n| blacklist | No | `[]` | `array` | Lets you target countries that should *not* appear in the dropdown. Should also be an array of country shortcodes. |\n| disabled | No | `false` | `boolean` | Disables the country field. |\n\n```<RegionDropdown />```\n\n| Parameter | Required? | Default | Type | Description |\n|:---|:---:|:---|:---|:---|\n| country | Yes | `\"\"` | `string` | The currently selected country. |\n| value | Yes | `\"\"` | `string` | The currently selected region. |\n| onChange | Yes | - | `function` | Callback that gets called when the user selects a region. Use this to store the value in whatever store you're using (or just the parent component state). |\n| onBlur | No | - | `function` | Callback that gets called when the user blurs off the region field. |\n| name | No | `\"rcrs-region\"` | `string` | The name attribute of the generated select box. |\n| id | No | `\"\"` | `string` | The ID of the generated select box. Not added by default. |\n| classes | No | `\"\"` | `string` | Any additional space-separated classes you want to add. |\n| blankOptionLabel | No | `-` | `string` | The label that appears in the region dropdown when the user hasn't selected a country yet.|\n| showDefaultOption | No | `true` | `boolean` | Whether you want to show a default option. This is what the user sees in the region dropdown after selecting a country. It defaults to the `defaultOptionLabel` setting (see next). |\n| defaultOptionLabel | No | `Select Region` | `string` | The default region option. |\n| onChange | No | `-` | `function` | Called when the user selects a region. Use this to store the region value. |\n| countryValueType | No | `full` | `string` | If you've changed the country dropdown `valueType` to `short` you will need to set this value to `short` as well, so the component knows what's being passed in the `country` property. |\n| labelType | No | `\"full\"` | `string` | Either `\"full\"` or `\"short\"`. This governs whether you see region names or region short codes in the dropdown. |\n| valueType | No | `\"full\"` | `string` | Either `\"full\"` or `\"short\"`. This controls the actual `value` attribute of each `<option>` in the dropdown.  |\n| disableWhenEmpty | No | `false` | `boolean` | Disables the region field when the user hasn't selected a country. |\n| disabled | No | `false` | `boolean` | Disables the region field. If set to true, it overrides `disableWhenEmpty` | \n| customOptions | No | `[]` | `Array<string>` | Appends a list of string to the every region dropdown, regardless of the country selected.\n\n\n<a name=\"command-line\"></a>\n### Command-line\n\nCheck out the `scripts` section of the package.json file to see them all, but these are the highlights:\n\n- `npm start` - regenerate everything, plus a watcher for local development.\n- `npm build` - build the dist files again. No watcher.\n- `rollup -c --config-countries=UK,US` - generate a custom build of the script `/dist` folder containing only those\ncountries you specify here. This *seriously* reduces file size, so if you can do it, do it.\n\n\n<a name=\"changelog\"></a>\n### Changelog\n\n- `1.4.3` - Dev 2, 2018: \n    - RegionDropdown converted to PureComponent; now updates on any prop change\n    - [country region data](https://github.com/country-regions/country-region-data) updated to 1.4.5\n- `1.4.2` - Nov 8, 2018:\n    - `customOptions` setting added for the Region dropdown. \n    - `priorityOptions` option added to the CountryDropdown to allow placing items at the top of the country dropdown.\n- `1.4.1` - Sept 9, 2018: bug fix for invalid JSON data source conversion. \n- `1.4.0` - Sept 8, 2018:\n    - *Breaking change*: the library is no longer exported in UMD format. Now it's only exported in es6 \n    (`dist/rcrs.es.js`) and commonJS (`dist/rcrs.js`) format. This library is intended for use in _React_ applications.\n    - *Breaking change*: no longer available via Bower. I don't recall ANY react component used via Bower, so if I'm\n    mistaken here, open a github issue to explain your use-case and I can re-add it.  \n    If you need UMD, check out the [plain vanilla version](https://github.com/country-regions/country-region-selector).\n    - country-region-data updated to latest version (1.4.4)\n    - You can now pass arbitrary attributes to the components (e.g. `style={{ color: 'red' }}` and have them output in the \n    markup)\n    - the old gulp build process updated to use rollup\n    - this component library, the source data set and the plain vanilla JS version are now all grouped under a single github \norganization\n- `1.3.0` - Mar 20, 2018. Bug fix for invalid country, [@n-david](https://github.com/n-david)! onBlur event added.\n- `1.2.3` - Nov 7, 2017. Country data updates. React moved to peer dependency, thanks [@iamdey](https://github.com/iamdey)!\n- `1.2.2` - Oct 4, 2017 - Update to pass event on change. Thanks [@robertnealan](https://github.com/robertnealan)! \n- `1.2.1` - Sept 6, 2017 - IE11 bug fix.\n- `1.2.0` - Aug 7, 2017 - updated country-region-data; dependency updates. \n- `1.1.0` - May 18, 2017 - dependency updates. `disabled` option added to `<CountryDropdown />` and `<RegionDropdown />`.\n- `1.0.4` - April 12, 2017 - bug fix. Thanks @bebbi and @tchaffee!\n- `1.0.3` - Jan 2, 2016 - updated country-region-data, repo link fix. \n- `1.0.2` - October 16, 2016 - Fix issue where source-data.js in lib had no country data.\n- `1.0.0` - July 1, 2016 - initial version.\n\n\n<a name=\"tests\"></a>\n### Tests\n\nThe Jest/Enzyme unit tests are found in the `src/tests` folder. The repo is hooked up to Travis CI to automatically run\nthe tests for each commit.\n\n\n<a name=\"thanks\"></a>\n### Thanks!\n\nBig thanks to a whole boatload of people:\n- contributors to this project and the source data.\n- Special thanks to the [create-react-library](https://github.com/transitive-bullshit/create-react-library) tool which \nI use here (un-ejected) to rollup this component library. Great stuff.\n\n\n<a name=\"license\"></a>\n### License\n\nMIT.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/country-regions/react-country-region-selector.git"
  },
  "scripts": {
    "build": "rollup -c",
    "deploy": "gh-pages -d example/build",
    "predeploy": "cd example && npm install && npm run build",
    "prepare": "npm run build",
    "start": "rollup -c -w",
    "test": "cross-env CI=1 react-scripts test --env=jsdom",
    "test:watch": "react-scripts test --env=jsdom"
  },
  "version": "1.4.3"
}
